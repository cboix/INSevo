#!/bin/bash
#Create comparison files of necessary genes such that they can be used to find D_n and D_s for D.Sim and D.Yak
mkdir -p ~/project/divergence
COMP=~/code/comparediv
MIDCOMP=~/code/crcomp
AACOMP=~/code/aacomp.py
echo "#!/bin/bash" > $COMP
awk '{fbfile = sprintf("~/db/SimV2/alnMSY/%s/%s.fa.anc",$2,$11); out =sprintf("~/project/divergence/%s_comp",$1); print "awk \x27 BEGIN{RS=\">[A-Z]\";} 1 < NR && NR < 5{gsub(\"\\n\",\"\");gsub(/([a-z <_]*>)/,\"\"); print $0}\x27 ",fbfile,"| perl -F, -ane \x27 $,=\" \"; print split(\"\",$F[0])\x27 | awk \x27 BEGIN{split(\"\",a)}{for(i = 1; i <=NF; i++){a[i]=sprintf(\"%s%s \",a[i],$i)}}END{for(i = 1; i <=NF;i++){print a[i]}}\x27 >",out}' ~/project/dmel_targets >> $COMP

awk '{out=sprintf("~/project/divergence/%sCDsplice",$1); print "grep",$11,"~/db/SimV2/dsimV2-clean.gff | awk \x27 BEGIN{split(\"\",a)}{if(NR == 1){b = $4};a[NR] = $0;}END{if(b > $4){for(i = NR; i >=1;i--){print a[i]}}  else{for(i = 1; i<=NR; i++){print a[i]}}}\x27 | awk \x27 NR==1{a=$4; print $4-a,$5-a}$3 ~/CDS/{print $4-a,$5-a}\x27 >",out}' ~/project/dmel_targets >> $COMP

awk '{batch = sprintf("~/project/divergence/%s.batch",$1);comp = sprintf("~/project/divergence/%s_comp",$1); splice = sprintf("~/project/divergence/%sCDsplice",$1);out = sprintf("~/project/divergence/%s.spliced",$1);print "awk \x27 BEGIN{OFS=\" \"; printf(\"awk \\x27 \")}{print \"NR >=\",$1,\"&& NR <=\",$2,\"{print $0}\"}END{print \"\\x27",comp,">",out,"\"}\x27",splice,">",batch}' ~/project/dmel_targets >> $COMP

echo "chmod +x ~/project/divergence/*.batch" >> $COMP
awk '{out=sprintf("~/project/divergence/%s.batch",$1); print out}' ~/project/dmel_targets >> $COMP

#Separate diverging polymorphisms:
awk '{ing=sprintf("~/project/divergence/%s.spliced",$1); out=sprintf("~/project/divergence/%s.simdiv",$1); print "awk \x27 NR % 3 == 1{split(\"\",a);split(\"\",b);c=0; for(i=1;i <=2;i++){a[i]=$1;b[i]=$2;if($1!~$2){c=c+1}; getline};i=3;a[i]=$1;b[i]=$2;if($1!~$2){c=c+1};if(c > 0){printf(\"%s%s%s %s%s%s %s %s\\n\",a[1],a[2],a[3],b[1],b[2],b[3],NR-2,c)}}\x27 ",ing,">"out }' ~/project/dmel_targets >> $COMP


#Run batch files to splice together the coding sequences and separate out divergences:
chmod +x $COMP
$COMP

#Creation of python script to tell if NS or SY:
rm ~/project/divergence/*.out
echo "#!/usr/bin/python2.6" > $AACOMP
echo "#Be sure to run w/ python2.6 (v2.6.5) instead of python (which is python v2.4.3)"
awk 'BEGIN{printf("bases = [\"t\", \"c\", \"a\", \"g\"]\ncodons = [a+b+c for a in bases for b in bases for c in bases]\namino_acids = \"FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG\"\ncodon_table = dict(zip(codons,amino_acids))\n\ndef compacids(a,b):\n\ta = a.lower()\n\tb = b.lower()\n\tif (\"-\" in b):\n\t\treturn \"DEL\"\n\telse:\n\t\tif codon_table[a] == codon_table[b]:\n\t\t\treturn \"SY\"\n\t\telif codon_table[b.lower()] == \"*\":\n\t\t\treturn \"NONSENSE\"\n\t\telse:\n\t\t\treturn \"NS\"\n",2)}{simdiv=sprintf("/net/home/carlesba/project/divergence/%s.simdiv",$1);     out = sprintf("/net/home/carlesba/project/divergence/%s.out",$1);    printf("with open(\"%s\",\"r\") as f:\n\twith open(\"%s\",\"a\") as out:\n\t\tfor line in f:\n\t\t\ta = line.split(\" \")\n\t\t\ta[-1] = a[-1][0]\n\t\t\tcode = \" \".join(a) + \" \" + compacids(a[0],a[1]) + \"\\n\"\n\t\t\tout.write(code)\n",simdiv,out)}' ~/project/dmel_targets >> $AACOMP

chmod +x $AACOMP
$AACOMP

#rm ~/project/divergence/*CDsplice
rm ~/project/divergence/*_comp
#rm ~/project/divergence/*.batch
