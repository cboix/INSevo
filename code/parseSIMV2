#!/bin/bash
# Variables:
PREFIX=/net/home/carlesba
TARGETS=$PREFIX/project/dmel_targets
AMINOCOMP=$PREFIX/code/aminocomp.py
DIVDIR=$PREFIX/project/divergence

#For running parallel jobs:
if [ "$1" == "" ]
then {
    TARGETS=$PREFIX/project/dmel_targets
    CDSIMDIV=$DIVDIR/cd.sim.div
    NCSIMDIV=$DIVDIR/nc.sim.div
    GFEXPDB=$PREFIX/project/GFExpsim
} elif [ "$1" == "CONTROL" ]
then {
    TARGETS=$PREFIX/project/random_targets
    CDSIMDIV=$DIVDIR/cd.sim.control.div
    NCSIMDIV=$DIVDIR/nc.sim.control.div
    GFEXPDB=$PREFIX/project/GFExpsimcon
} else {
    TARGETS=$1
} fi

# Folders:
mkdir -p $DIVDIR

# Grab comparative alignments of Dmel against Dsim and Dyak (Sim V2 assembly)
while read -r p
do
    eval $( echo $p | awk '{printf("GENE=%s; CHR=%s; FBGN=%s;",$1,$2,$11)}' ) 

    #Names for each gene:
    fasta=$PREFIX/db/SimV2/alnMSY/$CHR/$FBGN\.fa.anc
    spliced=$DIVDIR/$GENE\.spliced
    coding=$DIVDIR/$GENE\.cd.sim
    noncoding=$DIVDIR/$GENE\.nc.sim
    cddiv=$DIVDIR/$GENE\.cd.simdiv
    ncdiv=$DIVDIR/$GENE\.nc.simdiv

    # Only if either of the two does NOT exist.
    if [[ ! -e $cddiv || ! -e $ncdiv ]]
    then {
        echo "Creating assembly of gene $GENE"
        # Takes the FBtr that has the largest exon splice and puts it next to the d. mel, sim, yak sequences:
        awk 'BEGIN{RS=">[A-Z]";split("",a)} 1 < NR{gsub("\n","");gsub(/([a-zFBtr0-9 <_]*>)/,""); a[NR] = $0}END{for(i=1;i < NR;i++){printf("%s\n",a[i])}}'  $fasta | perl -F, -ane ' $,=" "; print split("",$F[0])' | awk 'BEGIN{split("",a);}{count = 0;for(i = 1; i <=NF; i++){a[i]=sprintf("%s%s ",a[i],$i)}}END{for(i = 1; i <=NF;i++){print a[i]}}' | awk 'BEGIN{split("",c);split("",a)}{for(i=4; i <= NF; i++){if($i !~ /-/){c[i] = c[i] + 1; if(length(s[i]) == 3 && s[i] !~ /ATG/){c[i] = 0}else{s[i] = sprintf("%s%s",s[i],$i)}}};a[NR] = $0}END{for(i=4; i <=NF; i++){d=(d?(c[d]>c[i]?d:i):i)}; printf("%s\n",d); for(i=1;i <=NR;i++){print a[i]}}' | awk 'NR == 1{a = $0}NR!=1{print $1,$2,$3,$a,NR-1}' > $spliced
    
        # Separate into coding and non coding regions:
        awk '($4 !~ /-/) && ($4 !~ /X/)' $spliced > $coding
        awk '($4 ~ /-/) && ($4 !~ /X/)' $spliced > $noncoding
    
        #KEEP INDEX from full region:
        # Separate codons and take DMEL and DSIM region divergences (coding and noncoding):
        awk 'NR % 3 == 1{aaposition=$5;split("",a);split("",b);c=0; for(i=1;i <=2;i++){a[i]=$1;b[i]=$2;if($1!~$2){c=c+1}; getline};i=3;a[i]=$1;b[i]=$2;if($1!~$2){c=c+1};if(c > 0){printf("%s%s%s %s%s%s %s %s %s\n",a[1],a[2],a[3],b[1],b[2],b[3],NR-2,c,aaposition)}}' $coding > $cddiv

        # Of course we want something completely different for NC:
        awk 'NR % 3 == 1{aaposition=$5;split("",a);split("",b);c=0; for(i=1;i <=2;i++){a[i]=$1;b[i]=$2;if($1!~$2){c=c+1}; getline};i=3;a[i]=$1;b[i]=$2;if($1!~$2){c=c+1};if(c > 0){printf("%s%s%s %s%s%s %s %s %s\n",a[1],a[2],a[3],b[1],b[2],b[3],NR-2,c,aaposition)}}' $noncoding > $ncdiv
    } fi
done < $TARGETS

    #RUN PYTHON SCRIPT to compare amino acids. Also need to pass arguments (do <+later+>)
    CDorNC=cd
    $AMINOCOMP $PREFIX $TARGETS $CDorNC

if [[ "$1" == "" || "$1" == "CONTROL" ]]
then {
#Once the divergences are computed in the python code, output counts to a full divergence file.
echo "Compiling full divergence file"; rm -f $CDSIMDIV; rm -f $NCSIMDIV;
while read -r p
do 
    eval $( echo $p | awk '{printf("GENE=%s",$1)}' )
    pycdout=$DIVDIR/$GENE\.cd.out
    ncdiv=$DIVDIR/$GENE\.nc.simdiv
    echo "$GENE to div file"
    if [[ -e $pycdout && -e $ncdiv ]]
    then {
        NONSENSE=$( grep NONSENSE $pycdout | awk 'END{print NR}' )
        if [[ "$NONSENSE" == "0" ]] 
        then {
        #TODO Step here to edit whether div is in same location:
            awk -v gene=$GENE 'BEGIN{sy=0;ns=0}$6~/SY/{sy=sy+1;}$6~/NS/{ns=ns+1;}END{print gene,sy,ns,ns+sy }' $pycdout >> $CDSIMDIV
            eval $( awk -v gene=$GENE '$6 ~ /SY/{sy=(sy?sy+1:1);}END{printf("SYC=%s",sy)}' $pycdout )
            awk -v gene=$GENE -v syc=$SYC 'BEGIN{ns=0}{ns=ns+$4;}END{print gene,syc,ns,ns+syc }' $ncdiv >> $NCSIMDIV

        } fi

    } fi

done < $TARGETS
} fi

if [[ "$1" == "" || "$1" == "CONTROL" ]]
then {
# Assess distribution of distances between SNPs
echo "Assessing randomness of the SNP positions"; rm -f $GFEXPDB
while read -r p
do
    eval $( echo $p | awk '{printf("GENE=%s",$1)}' )
    pycdout=$DIVDIR/$GENE\.cd.out
    NONSENSE=$( grep NONSENSE $pycdout | awk 'END{print NR}' )
    if [[ "$NONSENSE" == "0" ]] 
    then {

    echo "Evaluating mutation distribution in $GENE"
    LENGTH=$( awk 'END{print NR}' $DIVDIR/$GENE\.cd.sim )

    sort -u $pycdout | sort -nk 3 | awk 'BEGIN{a=0}$0 ~ /SY/{print $3-a; a=$3}' > $DIVDIR/$GENE\.sy.dist
    sort -u $pycdout | sort -nk 3 | awk 'BEGIN{a=0}$0 ~ /NS/{print $3-a; a=$3}' > $DIVDIR/$GENE\.ns.dist

    # Run R command to process this:
        R --slave -f $PREFIX/code/GFexp.R --args $LENGTH $PREFIX $GENE sim >> $GFEXPDB

    } fi

done < $TARGETS
} fi
