#!/bin/bash
# Variables:
PREFIX=/net/home/carlesba
TARGETS=$PREFIX/project/dmel_targets
AMINOCOMP=$PREFIX/code/aminocomp.py
CDSIMDIV=$PREFIX/project/divergence/cd.sim.div
NCSIMDIV=$PREFIX/project/divergence/nc.sim.div

# Folders:
mkdir -p $PREFIX/project/divergence

# Grab comparative alignments of Dmel against Dsim and Dyak (Sim V2 assembly)
while read -r p
do
    eval $( echo $p | awk '{printf("GENE=%s; CHR=%s; FBGN=%s;",$1,$2,$11)}' ) 

    #Names for each gene:
    fasta=$PREFIX/db/SimV2/alnMSY/$CHR/$FBGN\.fa.anc
    spliced=$PREFIX/project/divergence/$GENE\.spliced
    coding=$PREFIX/project/divergence/$GENE\.cd.sim
    noncoding=$PREFIX/project/divergence/$GENE\.nc.sim
    cddiv=$PREFIX/project/divergence/$GENE\.cd.simdiv
    ncdiv=$PREFIX/project/divergence/$GENE\.nc.simdiv

    # Only if either of the two does NOT exist.
    if [[ ! -e $cddiv || ! -e $ncdiv ]]
    then {
        echo "Creating assembly of gene $GENE"
	    # Takes the FBtr that has the largest exon splice and puts it next to the d. mel, sim, yak sequences:
	    awk 'BEGIN{RS=">[A-Z]";split("",a)} 1 < NR{gsub("\n","");gsub(/([a-zFBtr0-9 <_]*>)/,""); a[NR] = $0}END{for(i=1;i < NR;i++){printf("%s\n",a[i])}}'  $fasta | perl -F, -ane ' $,=" "; print split("",$F[0])' | awk 'BEGIN{split("",a);}{count = 0;for(i = 1; i <=NF; i++){a[i]=sprintf("%s%s ",a[i],$i)}}END{for(i = 1; i <=NF;i++){print a[i]}}' | awk 'BEGIN{split("",c);split("",a)}{for(i=4; i <= NF; i++){if($i !~ /-/){c[i] = c[i] + 1; if(length(s[i]) == 3 && s[i] !~ /ATG/){c[i] = 0}else{s[i] = sprintf("%s%s",s[i],$i)}}};a[NR] = $0}END{for(i=4; i <=NF; i++){d=(d?(c[d]>c[i]?d:i):i)}; printf("%s\n",d); for(i=1;i <=NR;i++){print a[i]}}' | awk 'NR == 1{a = $0}NR!=1{print $1,$2,$3,$a}' > $spliced
	
	    # Separate into coding and non coding regions:
	    awk '($4 !~ /-/) && ($4 !~ /X/)' $spliced > $coding
	    awk '($4 ~ /-/) && ($4 !~ /X/)' $spliced > $noncoding
	
	    # Separate codons and take DMEL and DSIM region divergences (coding and noncoding):
	    awk 'NR % 3 == 1{split("",a);split("",b);c=0; for(i=1;i <=2;i++){a[i]=$1;b[i]=$2;if($1!~$2){c=c+1}; getline};i=3;a[i]=$1;b[i]=$2;if($1!~$2){c=c+1};if(c > 0){printf("%s%s%s %s%s%s %s %s\n",a[1],a[2],a[3],b[1],b[2],b[3],NR-2,c)}}' $coding > $cddiv
	    awk 'NR % 3 == 1{split("",a);split("",b);c=0; for(i=1;i <=2;i++){a[i]=$1;b[i]=$2;if($1!~$2){c=c+1}; getline};i=3;a[i]=$1;b[i]=$2;if($1!~$2){c=c+1};if(c > 0){printf("%s%s%s %s%s%s %s %s\n",a[1],a[2],a[3],b[1],b[2],b[3],NR-2,c)}}' $noncoding > $ncdiv
    } fi
done < $TARGETS

    #RUN PYTHON SCRIPT to compare amino acids. Also need to pass arguments (do <+later+>)
    $AMINOCOMP

#Once the divergences are computed in the python code, output counts to a full divergence file.
echo "Compiling full divergence file"; echo "" > $CDSIMDIV; echo "" > $NCSIMDIV
while read -r p
do 
    eval $( echo $p | awk '{printf("GENE=%s",$1)}' )
    pycdout=$PREFIX/project/divergence/$GENE\.cd.out
    pyncout=$PREFIX/project/divergence/$GENE\.nc.out
    awk -v gene=$GENE '$5 ~ /SY/{sy=(sy?sy+1:1);}$5 ~ /NS/{ns=(ns?ns+1:1);}END{print gene,sy,ns,ns+sy }' $pycdout >> $CDSIMDIV
    awk -v gene=$GENE '$5 ~ /SY/{sy=(sy?sy+1:1);}$5 ~ /NS/{ns=(ns?ns+1:1);}END{print gene,sy,ns,ns+sy }' $pyncout >> $NCSIMDIV
done < $TARGETS
