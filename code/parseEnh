#!/bin/bash
#CREATES the Yakuba mapping of enhancers from the StarrSeq database.
PREFIX=/net/home/carlesba
SSEQ=$PREFIX/db/SSeq 
ENHDIR=$PREFIX/db/SSeq/enhancers
FULLGENES=$PREFIX/db/DGRP/fullgenes
INT=$PREFIX/db/Annotation/int-r5.51

#For running parallel jobs:
if [ "$1" == "" ]
then {
    TARGETS=$PREFIX/project/dmel_targets
    ENdiv=$PREFIX/project/divergence/ENH.yak.div
    Type=yak
    INSM=$SSEQ/InsulinMotifs
} elif [ "$1" == "CONTROL" ]
then {
    TARGETS=$PREFIX/project/random_targets
    ENdiv=$PREFIX/project/divergence/ENH.yak.control.div
    Type=control
    INSM=$SSEQ/InsulinMotifsControl
} else {
    TARGETS=$1
} fi

if [[ ! -e $INT ]]
then { awk '$2 ~ /FlyBase/ && $3 ~ /intron/{gsub(";"," ",$0);  gsub("Name="," ",$0); gsub("Name=","n;",$0); gsub("FBtr"," "); gsub(":"," ",$0); gsub(", ",","); print $1,$4,$5,$7,$12}' $PREFIX/db/Annotation/dmel-all-r5.51.gff | sort -u > $INT
} fi

#Necessary directories
mkdir -p $ENHDIR

# COMPILE NET OF POTENTIAL ENHANCER REGIONS FROM UTRs of GENES:
while read -r p
do
    eval $( echo $p | awk '{a=$5-10000; b=$6+10000; printf("GENE=%s; STO=%s; ST=%s; EN=%s; ETO=%s; DCT=%s; CHR=chr%s",$1,a,$5,$6,b,$8,$2)}' )
    NET=$ENHDIR/$GENE\.net
    CHUNKS=$ENHDIR/$GENE\.chunks
    int=$GENE-in
if [[ ! -s $NET ]] 
then { 

    #Clear file first
    if [[ "$DCT" == "+" ]] 
    then {
        echo "$STO $ST Upstream" > $CHUNKS
        echo "$EN $ETO Downstream" >> $CHUNKS
    } else {
        echo "$STO $ST Downstream" > $CHUNKS
        echo "$EN $ETO Upstream" >> $CHUNKS
    } fi
    awk -v it=$int '$5 == it {print $2,$3,"Intronic"}' $INT >> $CHUNKS

    echo "Grabbing enhancers around $GENE"
    rm -f $NET
    while read -r line
    do 
        eval $( echo $line | awk '{printf("SS=%s; EE=%s; TP=%s",$1,$2,$3)}' )
        #search both! files
        awk -v st=$SS -v en=$EE -v tp=$TP -v gene=$GENE -v chr=$CHR -v dct=$DCT -v rst=$ST -v ren=$EN '$1 == chr && $2 >= st && $2 <= en{dist=(dct~/-/?(ren-$2+1):($2-rst+1));dist=(tp~/Upstream/?-dist:dist);print $2-500,$2+500,$0,dct,tp,dist,gene}' $SSEQ/S2_STARRseq_rep1.peaks.txt >> $NET
        awk -v st=$SS -v en=$EE -v tp=$TP -v gene=$GENE -v chr=$CHR -v dct=$DCT -v rst=$ST -v ren=$EN '$1 == chr && $2 >= st && $2 <= en{dist=(dct~/-/?(ren-$2+1):($2-rst+1));dist=(tp~/Upstream/?-dist:dist);print $2-500,$2+500,$0,dct,tp,dist,gene}' $SSEQ/S2_STARRseq_rep2.peaks.txt >> $NET

    done < $CHUNKS

    #Sort -u the peaks, and annotate by distance from the peaks!
    sort -u $NET > .$GENE\tmp
    cat .$GENE\tmp > $NET
    rm .$GENE\tmp
} fi

done < $TARGETS


#NOW to get the sequences of each enhancer:
#note we need to make sure that the enhancers do not! overlap (that would be computationally annoying.)
while read -r p
do
    eval $( echo $p | awk '{printf("GENE=%s;",$1)}' )
    NET=$ENHDIR/$GENE\.net
    # Treat this as the CDS
    ENHbed=$ENHDIR/$GENE\_yak.bed
    ENHdiv=$ENHDIR/$GENE\.yak.div
    eval $( awk 'NR==1{printf("DCT=%s",$7)}' $NET )

    if [[ -s $NET && ! -e $ENHdiv ]] 
    then { 

    rm -f $ENHbed
    #Loop through the CDS that is EXPANDED.
    echo "Loop through bed file: $GENE"
    while read -r line
    do
        eval $( echo $line | awk '{printf("CHRNUM=%s; ST=%s; EN=%s; CENTR=%s; TP=%s; FAR=%s",$3,$1,$2,$4,$8,$9)}' )
        AXT=$PREFIX/db/LiftOver/$CHRNUM\.dm3.droYak2.net.axt
        # Also, make sure we only get one record per case here: (we do overlaps case by case:)
        # Grab record, THEN cut out - in the melanogaster genome.
    awk -v st=$ST -v en=$EN -v cnt=$CENTR -v tp=$TP 'BEGIN{RS="\n\n"}
    $1 !~ /##/ && st < en && en <= $4 && st >= $3 {p=st-$3+1; e=en-$3+1; print p,e,$10,$11,"all",$3,cnt,tp; }
    $1 !~ /##/ && st < en && en >=$4 && st >= $3 && st <= $4 {p=st-$3+1; e=$4-$3+1; print p,e,$10,$11,"leftside",$3,cnt,tp;}
    $1 !~ /##/ && st < en && st <= $3 && en >=$4 {e=$4-$3+1; print 1,e,$10,$11,"inside",$3,cnt,tp;}
    $1 !~ /##/ && st < en && st <=$3 && en <=$4 && en >=$3 {e=en-$3+1; print 1,e,$10,$11,"rightside",$3,cnt,tp;}' $AXT > .$GENE\tmp
        while read -r tline 
        do
            eval $( echo $tline | awk '{printf("pst=%s; est=%s; rst=%s; msg=%s; cnt=%s; tp=%s",$1,$2,$6,$5,$7,$8)}' )
            echo $tline | awk '{printf("%s\n%s",$3,$4)}' | perl -F, -ane ' $,=" "; print split("",$F[0])' | awk 'BEGIN{split("",a);}{count = 0;for(i = 1; i <=NF; i++){a[i]=sprintf("%s%s ",a[i],$i)}}END{for(i = 1; i <=NF;i++){print a[i]}}' | awk '$1 !~ /-/' | awk -v st=$pst -v en=$est -v rst=$rst -v cnt=$cnt -v tp=$tp -v far=$FAR 'NR >= st && NR <= en{idx=rst+NR-1;fa=(tp~/Ups/?far:-far);dist=((idx-cnt)>0?(idx-cnt):(cnt-idx));print $1,$2,idx,dist,tp,idx-cnt+fa}' >> $ENHbed
        done < .$GENE\tmp
        rm .$GENE\tmp
    done < $NET
        sort -nk3 $ENHbed | awk 'BEGIN{i=0}{b=sprintf("%s %s %s",$1,$2,$3); if(b == c){if(int(f4) > int($4)){a[i]=$0}}else{i=i+1;a[i]=$0}; c=b; f4=$4}END{for(j=1;j<=i;j++){print a[j]}}' | awk -v dc=$DCT 'BEGIN{split("",a)}{b=$0; if(dc ~ /-/){f1=($1 ~/C/?"G":($1~/G/?"C":($1~/A/?"T":($1~/T/?"A":($1 ~/c/?"g":($1~/g/?"c":($1~/a/?"t":($1~/t/?"a":"N")))))))); f2=($2 ~/C/?"G":($2~/G/?"C":($2~/A/?"T":($2~/T/?"A":($2 ~/c/?"g":($2~/g/?"c":($2~/a/?"t":($2~/t/?"a":"N")))))))); b=sprintf("%s %s %s %s %s %s",f1,f2,$3,$4,$5,$6);}a[NR]=b}END{for(i=1; i <=NR; i++){out=(dc~/+/?a[i]:a[NR-i+1]); print out}}' > $ENHdiv
    } fi
done < $TARGETS

#ALL of the stuff done later:
echo "Scanning for Motifs"
$PREFIX/code/motifScan.py $ENHDIR $TARGETS

#ONCE python is done:
# Take all differences, and annotate them by whether they fall into a motif or not. cycle through mutations file, not through .enh file.
echo "Annotating divergence file:"
$PREFIX/code/enhComp.py $ENHDIR $TARGETS

#Compile, in the most standard way, the ns/sy mutations:
if [[ "$1" == "" || "$1" == "CONTROL" ]] 
then { 
# Clear files:
    rm -f $INSM
    rm -f $ENdiv
    while read -r p
    do
        eval $( echo $p | awk '{printf("GENE=%s",$1)}' ) 
        ENOUT=$ENHDIR/$GENE\.out 
        ENH=$ENHDIR/$GENE\.mot
        ENBED=$ENHDIR/$GENE\.yak.div
        LNR=0
        eval $( awk 'END{printf("LNR=%s",NR)}' $ENH )

        #condition if empty?
        if [[ -s $ENOUT ]] 
        then {
        echo "$GENE to div file"
        LENB=0
        eval $( awk 'END{printf("LENB=%s",NR)}' $ENBED )
        sort -u $ENOUT | awk -v gene=$GENE -v lnr=$LNR -v len=$LENB 'BEGIN{sy=0;ns=0}$0 ~ /SY/{sy=sy+1}$0 ~ /NS/{ns=(ns?ns+1:1);}END{print gene,sy,ns,ns+sy,lnr,len}' >> $ENdiv
    } else {
    echo "$GENE 0 0 0 $LNR" >> $ENdiv
    } fi
        cat $ENH >> $INSM
    done < $TARGETS

    sort -u $ENdiv > .tmp
    cat .tmp > $ENdiv
    rm -f .tmp

    #Separate by top 10 motifs:
    awk '{gsub(">","",$0); print $NF}' $INSM | sort | uniq -c | sort -rn | head -n 10 > $INSM\.top

mkdir -p $SSEQ/Motif
while read -r line
do
        eval $( echo $line | awk '{printf("MOTIF=%s",$2)}' )
        OUTmot=$SSEQ/Motif/$Type\.$MOTIF\.div

        while read -r p 
        do 
            eval $( echo $p | awk '{printf("GENE=%s",$1)}' ) 
            LNR=0
            ENOUT=$ENHDIR/$GENE\.out 
            ENH=$ENHDIR/$GENE\.mot
            ENBED=$ENHDIR/$GENE\.yak.div
            eval $( awk -v mot=$MOTIF 'BEGIN{a=0}$0 ~ mot{a=a+1}END{printf("LNR=%s",a)}' $ENH )
            if [[ -s $ENOUT ]] 
            then {
                LENB=0 
                eval $( wc $ENBED | awk '{printf("LENB=%s",$1)}' )
                sort -u $ENOUT | awk -v gene=$GENE -v lnr=$LNR -v mot=$MOTIF -v len=$LENB 'BEGIN{ns=0;sy=0;}$0 ~ /SY/{sy=sy+1}$0 ~ mot{ns=(ns?ns+1:1);}END{print gene,sy,ns,ns+sy,lnr,len}' >> $OUTmot
            } fi
        done < $TARGETS

        sort -u $OUTmot > .$MOTIF\.tmp
        cat .$MOTIF\.tmp > $OUTmot
        rm -f .$MOTIF\.tmp
done < $INSM\.top

awk '$3 > .1{print $4,$5}' $INSM | sort | uniq -c | sort -rn | awk '{print $1,$2,$3}' > $INSM\.count
#Here put python script TODO that creates R-readable table.

# Creating table:
rm -f $INSM\.tab
# has to be: Directory, targets, countfile, outfile.
$PREFIX/code/geneTable.py $ENHDIR $TARGETS $INSM\.count $INSM\.tab

} fi

#Clear files that will not be used anymore:
#Nothing as of yet!
