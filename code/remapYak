#!/bin/bash
#CREATES the Yakuba remapping from flybase annotation and liftOver files.
#In format chr, _, type, pos1,pos2, _,_,_,Dmel=FBgn####:FBtr#######etc
PREFIX=/net/home/carlesba
YAKDIR=$PREFIX/db/DGRP/yakgenes
FULLGENES=$PREFIX/db/DGRP/fullgenes
CDS=$PREFIX/db/Annotation/cds-r5.33
ydiv=$PREFIX/project/divergence/cd.yak.div

#For running parallel jobs:
if [ "$1" == "" ]
then
    TARGETS=$PREFIX/project/dmel_targets
else
    TARGETS=$1
fi

#Necessary directories
mkdir -p $YAKDIR

if [[ ! -s $CDS ]] 
then { awk '$2 ~ /FlyBase/ && $3 ~ /CDS/{gsub(";"," ",$0); gsub("Name="," ",$0); gsub("Name=","n;",$0); gsub(":"," ",$0); print $1,$3,$4,$5,$10,$11}' $PREFIX/db/Annotation/dmel-all-r5.33.gff | awk '{gsub(/\(/,"_",$0); gsub(/\)/,"_",$0); print $0}' > $CDS 
} fi
    # TODO the problem is IF I REMOVE chr_random then I will have gaps! and GFEXP will be off... (not by that much though. only one occurrence, in the exponential dist).
    #TODO edit so that if $5 == 2, (in python) then a path finding function is made and a synonymous path is made.
#---------------------------------------------------------------------------#
while read -r p
do
    eval $( echo $p | awk '{printf("GENE=%s; CHR=%s; FBGN=%s; cds=%s-cds",$1,$2,$11,$1)}' )
    GENE=zuc
    cds=zuc-cds
    CHR=2L
    BED=$FULLGENES/$GENE\.bed
    YAKbed=$YAKDIR/$GENE\_yak.bed
    YAKdiv=$YAKDIR/$GENE\.yak.div

    if [[ ! -s $YAKdiv ]] 
    then {
        
        #Get the longest transcript's number (to extract longest CDS):
        eval $( awk -v cds=$cds '$6 == cds' $CDS | sort -nk 5 | awk '{if(b != $5){printf("%s %s\n",a,b); a=0; b=$5} a=a+$4-$3+1}END{printf("%s %s\n",a,b)}' | awk 'NR != 1' | sort -n | awk 'END{printf("TR=%s",$2)}' )

        # Generate bed files to be used in the liftOver work: # Put together the CDS and EXPAND it:
        awk -v gene=$GENE -v tr=$TR '$6 ~ gene && $5 == tr' $CDS | sort -u > $BED 
        #A warning!
        awk -v st=$ST -v en=$EN 'END{if(st > en){print "start is above end"}}' $BED
       
        rm -f $YAKbed
        #Loop through the CDS that is EXPANDED.
        echo "Loop through bed file: $GENE"
        while read -r line
        do
            eval $( echo $line | awk '{printf("CHRNUM=chr%s; ST=%s; EN=%s",$1,$3,$4)}' )
            AXT=$PREFIX/db/LiftOver/$CHRNUM\.dm3.droYak2.net.axt
            # Also, make sure we only get one record per case here: (we do overlaps case by case:)
            # Grab record, THEN cut out - in the melanogaster genome.
            awk -v st=$ST -v en=$EN 'BEGIN{RS="\n\n"}
            $1 !~ /##/ && st < en && en <= $4 && st >= $3 {p=st-$3+1; e=en-$3+1; print p,e,$10,$11,"all"}
            $1 !~ /##/ && st < en && en >=$4 && st >= $3 && st <= $4 {p=st-$3+1; e=$4-$3+1; print p,e,$10,$11,"leftside"}
            $1 !~ /##/ && st < en && st <= $3 && en >=$4 {e=$4-$3+1; print 1,e,$10,$11,"inside"}
            $1 !~ /##/ && st < en && st <=$3 && en <=$4 && en >=$3 {e=en-$3+1; print 1,e,$10,$11,"rightside"}' $AXT > .$GENE\tmp
            while read -r tline 
            do
                eval $( echo $tline | awk '{printf("pst=%s; est=%s;",$1,$2)}' )
                echo $tline | awk '{printf("%s\n%s",$3,$4)}' | perl -F, -ane ' $,=" "; print split("",$F[0])' | awk 'BEGIN{split("",a);}{count = 0;for(i = 1; i <=NF; i++){a[i]=sprintf("%s%s %s ",a[i],$i,i)}}END{for(i = 1; i <=NF;i++){print a[i]}}' | awk '$1 !~ /-/' | awk -v st=$pst -v en=$est 'NR >= st && NR <= en' | awk '{print $1,$3,$4}' >> $YAKbed
            done < .$GENE\tmp
            #rm .$GENE\tmp
            # awk -v st=$ST -v en=$EN 'BEGIN{RS="\n\n"}
            # $1 !~ /##/ && st < en && en <= $4 && st >= $3 {p=st-$3+1; e=en-st+1; m=substr($10,p,e); y=substr($11,p,e); print m,y,"all",st,en}
            #$1 !~ /##/ && st < en && en >=$4 && st >= $3 && st <= $4 {p=st-$3+1; e=$4-st+1; m=substr($10,p,e); y=substr($11,p,e); print m,y,"leftside",st,$4}
            #$1 !~ /##/ && st < en && st <= $3 && en >=$4 {print $10,$11,"inside",$3,$4}
            #$1 !~ /##/ && st < en && st <=$3 && en <=$4 && en >=$3 {e=en-$3+1;m=substr($10,1,e);y=substr($11,1,e); print m,y,"rightside",$3,en}' $AXT >> $YAKbed
        done < $BED
        #Work needs to be done to integrate if not all are "all" (but they should be).
        awk 'NR % 3 == 1{aaposition=NR;split("",a);split("",b);c=0; for(i=1;i <=2;i++){a[i]=$1;b[i]=$2;if($1!~$2){c=c+1}; getline};i=3;a[i]=$1;b[i]=$2;if($1!~$2){c=c+1};if(c > 0){printf("%s%s%s %s%s%s %s %s\n",a[1],a[2],a[3],b[1],b[2],b[3],c,aaposition)}}' $YAKbed | awk '$2 !~ /[XNn-]/' > $YAKdiv

  } fi
done < $TARGETS

$PREFIX/code/yaminocomp.py $PREFIX $TARGETS
#ONCE python is done:

if [[ "$1" == "" ]]
then {
echo "Compiling full divergences file:"; rm $ydiv

while read -r p
do
    eval $( echo $p | awk '{printf("GENE=%s",$1)}' )
    YAKout=$YAKDIR/$GENE\.out
    if [[ -e $YAKout ]]
    then {
        NONSENSE=$( grep NONSENSE $YAKout | awk 'END{print NR}' )
        if [[ "$NONSENSE" == "0" ]] 
        then {
        #TODO Step here to edit whether div is in same location:
    sort -u $YAKout | awk -v gene=$GENE '$5 ~ /SY/{sy=(sy?sy+1:1);}$5 ~ /NS/{ns=(ns?ns+1:1);}END{print gene,sy,ns,ns+sy}' >> $ydiv
        } fi
    } fi
done < $TARGETS

} fi

#Clear files that will not be used anymore:
